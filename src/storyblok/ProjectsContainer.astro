---
import { storyblokEditable } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import { Icon } from "astro-icon";
const { blok } = Astro.props;
---

<section>
    <div class="m-8 flex h-16 items-center justify-between">
        <nav class="flex items-center space-x-2">
            <a href="/" class="inline-flex text-2xl font-bold text-gray-900 hover:text-primary dark:text-gray-100">
                <Icon class="mr-2 h-8 w-8" pack="ph" name="caret-left-bold" />
                Retour
            </a>
        </nav>
        <div class="flex h-min grow items-center justify-end space-x-6">
            <div class="flex space-x-2">
                {
                    blok.filters?.map((filter) => (
                        <div>
                            <input type="radio" id={filter.replaceAll(/ /g, "-")} name="filterer" value={filter} class="peer hidden" checked={filter.toLowerCase() === "default"} />
                            <label for={filter.replaceAll(/ /g, "-")} class="peer-disabled:hover:text-curren cursor-pointer rounded-full border-2 border-primary px-4 py-2 peer-checked:bg-primary peer-checked:text-white peer-disabled:cursor-default peer-disabled:border-gray-200 peer-disabled:peer-checked:bg-gray-200 peer-disabled:peer-checked:text-current hover:bg-primary hover:text-white peer-disabled:hover:bg-transparent peer-disabled:peer-checked:hover:bg-gray-200 dark:text-gray-100 peer-checked:dark:text-gray-100 hover:dark:text-gray-100">
                                {filter}
                            </label>
                        </div>
                    ))
                }
            </div>
            <div class="h-10">
                <input type="text" name="search" class="peer h-full rounded-full border-2 border-gray-300 bg-transparent px-4 transition-colors placeholder:text-gray-400 focus:border-primary focus:outline-none dark:border-gray-700" id="searchInput" placeholder="Rechercher" />
            </div>
        </div>
    </div>
    <div class="grid w-full grid-cols-1 gap-8 px-16 tablet:grid-cols-2 laptop:grid-cols-3 laptop:px-24 desktop:px-32 ultrawide:grid-cols-5 ultrawide:px-48" {...storyblokEditable(blok)}>
        {
            blok.projects?.map((content) => {
                return <StoryblokComponent blok={content} />;
            })
        }
    </div>
</section>

<script define:vars={{ blok }}>
let projects = blok.projects;
const input = document.getElementById("searchInput");
input.addEventListener("input", searchProject);
const filterButtons = document.getElementsByName("filterer");
filterButtons.forEach((btn) =>
    btn.addEventListener("change", () => {
        let filter = "";
        if (btn.checked) {
            if (btn.value.toLowerCase() === "default") {
                filter = "";
            } else {
                filter = btn.value.toLowerCase();
            }
        }

        projects.forEach((project) => {
            if (filter === "" || filter === project.type.toLowerCase()) {
                document.getElementById(project.title).classList.remove("hidden");
            } else {
                document.getElementById(project.title).classList.add("hidden");
            }
        });
    })
);

function searchProject(e) {
    search = e.target.value;
    projects.forEach((project) => {
        if (isContaining(search, project)) {
            document.getElementById(project.title).classList.remove("hidden");
        } else {
            document.getElementById(project.title).classList.add("hidden");
        }
    });
}

function isContaining(value, project) {
    return project.title.toLowerCase().indexOf(value.toLowerCase()) !== -1 || project.description.toLowerCase().indexOf(value.toLowerCase()) !== -1 || project.year.indexOf(value) !== -1 || project.languages.join(" ").toLowerCase().indexOf(value.toLowerCase()) !== -1 || project.type.toLowerCase().indexOf(value.toLowerCase()) !== -1;
}
</script>
